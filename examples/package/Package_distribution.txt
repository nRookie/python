Package distribution

You may be asking how this all works if you intend to 
distribute your code as a package.

Yes I need to distribute my code as a package

How does Pipenv work with setup.py files ?

There are a lot of nuances to that question. First
, a setup.py file is necessary when you're using 
setuptools as your build/distribution system. This 
has been the de facto standard for a while now,
but recent changes have made the use of setuptools
optional.

This means that projects like flit can use the new pyproject.toml 
to specify a different build system that doesn't require 
a setup.py.

All that being said, for the near future setuptools and an accompanying setup.py
will still be the default choice for many people.

Here's a recommended workflow for when you are using a setup.py as a way to distribute 
your package:

- setup.py 
- install_requires keyword should include whatever the package"
minimally needs to run correctly."
- Pipfile
- Represents the concrete requirements for your package 
- Pull the minimally required dependencies from setup.py 
by installing your package using Pipenv:
    - Use pipenv install '-e .'
    - That will result in a line in your Pipfile that looks something
    like "e1839a8" = {path = ".", editable = true}.

-Pipfile.lock 
-Details for a reproducible environment generated from pipenv lock .

To clarify, put your minimum requirements in setup.py instead of directly with pipenv .
install. Then use the pipenv install '-e .' command to install your package 
as editable. This gets all the requirements from setup.py
into your environment. Then you can use pipenv lock to get a reproducible 
environment.