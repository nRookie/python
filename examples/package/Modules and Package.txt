This article explores Python modules and Python packages,
two mechanisms that facilitate modular programming.


Modular programming refers to the process of breaking a large,unwieldy
programming task into separate, smaller,more manageable subtasks or modules.

There are several advantages to modularizing code in a large application:

- Simplicity: Rather than focusing on the entire problem at hand,
a module typically focuses on one relatively small portion of the problem.
If you're working on a single module, you'll have a smaller problem domain to 
wrap your head around.This makes development easier and less error-prone.


- Maintainability: Modules are typically designed so that 
they enforce logical boundaries between different problem
domains. If modules are written in a way that minimizes interdependency,
there is decreased likelihood that modifications to a single module will have
an impact on other parts of the program.(You may even be able to make changes to a module
without having any knowledge of the application outside that module.)This
makes it more viable for a team of many programmers to work collaboratively on a 
large application.

- Reusability: Functionality defined in a single module can be easily reused
(through an appropriately defined interface) by other parts of the 
application. This eliminates the need to recreate duplicate code.

- Scoping: Modules typically define a separate namespace, which helps avoid collisions
between identifiers in different areas of a program.(One of the tenets in the
Zen of Python is Namespaces are one honking great idea --
Let's do more of those!)

Functions, modules and packages are all constructs in Python that promote 
code modularization.


Python Modules: Overview

There are actually three different ways to define a module in Python:

1. A module can be written in Python itself.
2. A module can be written in C and loaded dynamically at run-time,like
the re(regular expression) module.
3. A built-in module is intrinsically contained in the interpreter, like the itertools module .

A module's contents are accessed the same way in all three cases: with the import 
statement.

Here, the focus will mostly be on modules that are written in Python. The cool thing
about modules written in Python is that they are exceedingly straightforward to build.
All you need to do is create a file that contains legitimate Python code and then
give the file a name with a .py extension. That's it! No special syntax or voodoo
is necessary.

For example, suppose you have created a file called mod.py containing following:

mod.py
s = "If comrade Napoleon says it, it must be right."
a = [ 100,200,300]

def foo(arg):
    print(f'arg = {arg}')

class Foo:
    pass

Several objects are defined in mod.py:
    s(a string)
    a(a list)
    foo() (a function)
    Foo(a class)

Assuming mod.py is in an appropriate location, which you will learn more about
shortly, these objects can be accessed by importing the module as follows:

import mod
print(mod.s)







The Module Search Path

Continuing with the above example, let's take a look at what happens when
Python executes the statement:

import mod 

When the interpreter executes the above import statement, it searches for mod.py
in a list of directories assembled from the following sources:

- The directory from which the input script was run or the current directory 
if the interpreter is being run interactively

- The list of directories contained in the PYTHONPATH environment variable, if it is set.
(The format for PYTHONPATH is OS-dependent but should mimic the PATH environment variable.)

- An installation-dependent list of directories configured at the time Python is installed.


Thus, to ensure your module is found, you need to do one of the following:

- Put mod.py in the directory where the input script is located or the current

- Modify the PYTHONPATH environment variable to contain the directory where mod.py is located before
starting the interpreter. 

    - Or : Put mod.py in one of the directories already contained in the PYTHONPATH variable 

- Put mod.py in one of the installation-dependent directories,which you may or may not have
write-acess to, depending on the OS. 


There is actually one additional option: you can put the module file in any
directory of your choice and then modify sys.path at run-time so that it 
contains that directory. For example, in this case , you could put mod.py 
in directory C:\Users\john and then issue the following statements .

sys.path.append(r'C:\Users\john')
sys.path


Once a module has been imported , you can determine the location where it was 
found with the module's __file__ attribute:

import mod
mod.__file__

import re 
re.__file__
'C:\\Python36\\lib\\re.py' 


The import Statement

Module contents are made available to the caller with the import statement. The import statement 
takes many different forms, shown below.

import <module_name>
The simplest form is the one already shown above:

Python 
import<module_name>

Note that this does not make the module contents directly accessible to the caller.
Each module has its own private symbol table,, which serves as the global symbol
table for all objects defined in the module. Thus, a module creates a separate 
namespace,as already noted.

The statement import <module_name> only places<module_name> in the caller's 
symbol table. The objects that are defined in the module remain in the module's 
private symbol table.

From the caller, objects in the module are only accessible when prefixed with 
<module_name> via dot notation, as illustrated below.

After the following import statement, mod is placed into the local symbol table.
Thus, mod has meaning in the caller's local context: 

After the following import statement, mod is placed into the local symbol table.
Thus,mod has meaning in the caller's local context:

Python 
import mod 
mod

But s and foo remain in the module's private symbol table and are not meaningful in the 
local context:

from <module_name> import <name(s)>
An alternate form of the import statement allows individual objects from the module
to be imported directly into caller's symbol table:

from <module_name> import <name(s)>

Following execution of the above statement, <name(s)> can be referenced in the caller's environment without the <module_name>>
prefix:

Because this form of import places the object names directly into the caller's symbol table,
any objects that already exist with the same name will be overwritten:

It is even possible to indiscriminately import everything from a module at one fell
swoop:

from <module_name> import *

This will place the names of all objects from <module_name> into the local symbol
table,with the exception of any that begin with the underscore(_) character.

For example:

from mod import *
s
If comrade Napoleon says it, it must be right.'
a
[100,200,300]

This isn't necessarily recommended in large-scale production code. It's a bit 
dangerous because you are entering names into the local symbol table en masse. 
Unless you know them all well and can be confident there won't be a conflict,
you have a decent chance of overwriting an existing name inadvertently. However,
this syntax is quite handy when you are just muckign around with the interactive interpreter,
for testing or discovery purposes, because it quickly gives you access to everything a module 
has to offer without a lot of typing .

The dir() Function 

The built-in function dir() returns a list of defined names in a namespace. without 
arguments, it produces an alphabetically sorted list of names in the current local 
symbol table:

Executing a Module as a Script

Any .py file that contains a module is essentially also a Python script,
and there isn't any reason it can't be executed like one. 


Python Packages 

Suppose you have developed a very large application that includes 
many modules. As the number of modules grows, it becomes difficult to keep track of
them all if they are dumped into one location. This is particularly so if they have similar
names of functionality. You might wish for a means of grouping and organizing them.

Packages allow  for a hierarchical structuring of the module namespace using dot notation.
In the same way that modules help avoid collisions between global variable names,
packages help avoid collisions between global variable names, packages help avoid collisions 
between module names. 

Creating a package is quite straightforward , since it makes use of the operating system's inherent
hierarchical file structure. Consider the following arrangement:



Package initialization 

If a file name __init__.py is present in a package directory, it is invoked when the 
package or a module in the package is imported. This can be used for execution of package
initialization code, such as initialization of package-level data.

For example, consider the following __init__.py file:

__init__.py 

print(f'Invoking __init__.py for ({__name})')
A = ['quux','corge','grault']


__init__.py can also be used to effect automatic importing of modules from a 
package. For example, earlier you saw that the statement import pkg only places
the name pkg in the caller's local symbol table and doesn't import any modules.But
if __init__.py in the pkg directory contains the following:

__init__.py 

print(f'Invoking __init__.py for {__name__}')
import pkg.mod1, pkg.mod2 

Not much, You might have expected (assuming you had any expectations 
at all) that Python would dive down into the package directory, find all the modules 
it could, and import them all. But as you can see , by default that is not what happens.

Instead, Python follows this convention: if the __init__.py file in the package 
directory contains a list named __all__, it is taken to be a list of modules that should be 
imported when the statement from <package_name> import * is encountered.

For the present example, suppose you create an __init__.py in the pkg directory 
like this :

pkg/__init__.py 

__all__ = [ 
    'mod1',
    'mod2',
    'mod3',
    'mod4'
]

Now from pkg import * imports all four modules:
>>> dir() 

>>> from pkg import * 
>>> dir() 

>>> mod2.bar() 

>>> mod4.Qux 


Using import * still isn't considered terrific form, any more for packages than 
for modules, But this facility at least gives the creator of the package some 
control over what happens when import * is specified.(In fact, it provides the capability
to disallow it entirely, simply by declining to define __all__ at all. As you have seen,
the default behavior for packages is to import nothing.)

By the way, __all__ can be defined in a module as well and serves the same purpose:
to control what is imported with import *. For example, modify mod1.py 
as follows:

foo() ( the function) is now defined in the local namespace, but Foo(the class ) is not,
because the latter is not in __all__.

In summary,__all__ is used by both packages and modules to control what is 
imported when import * is specified. But the default behavior differs:

- For a package, when __all__ is not defined, import * does not import anything.

- For a module , when __all__ is not defined , import * imports everything.




