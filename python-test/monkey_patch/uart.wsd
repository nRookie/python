    @startuml uart workflow

    actor robot as r

    participant NB_ATKeywords as na


    entity response_queue as rspq

    entity rxBuffer as rxb
    entity rspBuffer as rspb
    entity eventBuffer as eb

    participant low_level_nb_at as llna

    participant low_level_uart_at as llua  

    entity rx_queue as rxq
    entity tx_queue as txq

    participant module as m


    loop when uart port is opened 
        alt uart_write is set
            txq -> m: send data
            llua -> llua: unset uart_write
        else uart_write is not set and there is data from module 
            m -> rxq: recv data 
        end
    end 

    loop when uart port is opened
        llna -> llua: ll_uart_read
        llna -> rxq: get data from rx_queue 
        rxq -> llna: return data

        alt wait_response_counter > 0

            loop length of data > 0
                llna -> rspb: put one bytes of data into rspBuffer and len of data - 1.
                rspb -> llna: decode the data from rspBuffer into recv
            
                alt  recv ends with expected_endswith_str
                    llna -> rspq: put the recv into response_queue
                    llna -> llna: wait rsp_counter decrase
                    alt length of data != 0
                        llna -> eb: put the remaining data into event_buffer.
                    end
                    llna -> rspb: clear the content in the rspBuffer
                    llna -> llna: clear the expected_endswith_str
                else parse recv according to RESPONSE_REGEXP

                    alt recv match the RESPONSE_REGEXP 
                        llna -> rspq: put the recv into response_queue.
                        llna -> llna: wait rsp_counter decrase

                        alt length of data != 0
                        llna -> eb: put the remaining data into event_buffer.
                        end

                        llna -> rspb: clear the content in the rspBuffer
                    end 

                end 
            end
        
        else wait_response_counter == 0
            llna -> eb: put data into the event_Buffer
        end
    end

    r -> na : NB AT EXE CMD
    activate na
        na -> na : NB AT SEND CMD
        activate na
            na -> na: NB AT SEND DATA
            activate na
                na -> llna: uart write
                activate llna
                    llna -> llua: ll uart write
                    activate llua
                        llua -> txq: enqueue
                        llua -> llua: set uart_write
                        llua -> llna:
                        deactivate llua
                    llna -> na:  
                    deactivate llna
                deactivate na
            na -> llna: wait rsp_counter increase
            llna -> na:
            deactivate na
        na -> na: NB AT READ CMD RSP
        activate na
            alt enswith_str is not None 
                na -> na: set expected_rsp_endswith to endwith_str
            end
            na -> llna: uart_read
            activate llna
                alt  remain_time >0 and response_queue is not empty
                    llna -> rspq: get data from response queue
                    rspq -> llna : return some data
                    llna -> na: return data 
                else remain_time < 0
                    llna -> llna: wait rsp_counter decrease
                    llna -> na: raise Timeout Error
                end
                deactivate llna
            na -> na: return data
            deactivate na
        na -> r : return data
        deactivate na

    
    @enduml